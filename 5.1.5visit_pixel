#include<opencv2/core/core.hpp>
#include<opencv2/highgui/highgui.hpp>
#include<iostream>
using namespace std;
using namespace cv;

void ColorReduce(Mat& inputImage, Mat& outputImage, int div);

int main()
{
	//原始图
	Mat srcImage = imread("1.jpg");
	imshow("原始图像",srcImage);
	//创建效果图
	Mat dstImage;
	dstImage.create(srcImage.rows, srcImage.cols, srcImage.type());
	//记录起始时间
	double time0 = static_cast<double>(getTickCount());
	//颜色空间缩减函数
	ColorReduce(srcImage, dstImage, 32);
	//计算运行时间并输出
	time0 = ((double)getTickCount() - time0) / getTickFrequency();
	cout << "此方法运行时间位：" << time0 << "秒" << endl;
	//显示效果图
	imshow("效果图", dstImage);
	waitKey(0);

}
/*
//方法一 指针访问像素
void ColorReduce(Mat& inputImage, Mat& outputImage, int div)
{
	outputImage = inputImage.clone();
	int rowNumber = outputImage.rows;//行数
	int colNumber = outputImage.cols*outputImage.channels();//列数*通道数
	//遍历像素值
	for (int i = 0; i < rowNumber; i++)//行循环
	{
		uchar*data = outputImage.ptr<uchar>(i);//i行首地址
		for (int j = 0; j < colNumber; j++)//列循环
		{
			data[j] = data[j] / div*div + div / 2;
		}

	}
}
*/

/*
//方法二迭代器操作图像
void ColorReduce(Mat& inputImage, Mat& outputImage, int div)
{
	outputImage = inputImage.clone();
	Mat_<Vec3b>::iterator it = outputImage.begin<Vec3b>();//初始位置迭代器
	Mat_<Vec3b>::iterator itend = outputImage.end<Vec3b>();//终止位置迭代器
	//存取像素
	for (; it != itend; ++it)
	{
		(*it)[0] = (*it)[0] / div*div + div / 2;
		(*it)[1] = (*it)[1] / div*div + div / 2;
		(*it)[2] = (*it)[2] / div*div + div / 2;
	}

}

*/

/*
//方法三 动态地址计算
void ColorReduce(Mat& inputImage,Mat& outputImage,int div)
{
	outputImage = inputImage.clone();
	int rowNumber = outputImage.rows;
	int colNumber = outputImage.cols;
	for (int i = 0; i < rowNumber; i++)
	{
		for (int j = 0; j < colNumber; j++)
		{
			outputImage.at<Vec3b>(i, j)[0] = outputImage.at<Vec3b>(i,j)[0] / div*div + div / 2;//蓝色
			outputImage.at<Vec3b>(i, j)[1] = outputImage.at<Vec3b>(i, j)[1] / div*div + div / 2;//绿色
			outputImage.at<Vec3b>(i, j)[2] = outputImage.at<Vec3b>(i, j)[2] / div*div + div / 2;//红色
		}
	}
}
*/
